***********************************************************************
* MVS SERVICES OVER CTC - MBRLIST Command (0x02)                      *
*                                                                     *
* Copyright 2022 Matthew R. Wilson <mwilson@mattwilson.org>           *
*                                                                     *
* This file is part of CTC Mainframe API. CTC Mainframe API is free   *
* software: you can redistribute it and/or modify it under the terms  *
* of the GNU General Public License as published by the Free Software *
* Foundation, either version 3 of the license, or (at your option)    *
* any later version.                                                  *
***********************************************************************
*
         PRINT GEN
MBRLIST  CSECT
         SAVE  (14,12),,*       Save caller's registers
         BALR  R12,0            Load current address
         USING *,R12            Establish addressability
         ST    R13,SAVEAREA+4   Store caller's savearea address
         LA    R13,SAVEAREA     Load address of our savearea
**********************************************************************
* COMMAND: MBRLIST (0x02)                                            *
* Command parameter will be the name of a PDS we wish to read the    *
* member directory from.                                             *
**********************************************************************
* Copy paramater list addresses
         MVC   CTCCMDAD,0(R1)   Address of CTCCMD DCB
         MVC   CTCDTAAD,4(R1)   Address of CTCDATA DCB
         MVC   CMDINAD,8(R1)    Address of command input data
* Check that the parameter (dataset name) length is 44 bytes
         L     R2,CMDINAD       Get address of command input data
         L     R1,0(,R2)        Get command parameter length
         N     R1,CMDLNMSK      Mask out the command param length
         SRL   R1,8             Shift right 8 bits
         LA    R3,44            R3 = 44
         CLR   R1,R3            Length = 44?
         BNE   BADLEN           No, bail out
* Get the DSNAME from the command input area
         MVC   DYNDSN,3(R2)
*
* Before we try to read a directory from the dataset, we will first
* locate it in the catalog then read the DSCB from the volume's VTOC to
* ensure the DSORG is PO.
*
* LOCATE the dataset in the catalog.
         LOCATE LOCCMLST        LOCATE the dataset name in the catalog
         LTR   R15,R15          Success?
         BNZ   LOCERR           ...no, return the condition code
* OBTAIN the DSCB
         MVC   OBTVOLSR,LOCWRK+6 Copy 1st volume serial # to our OBTAIN
         OBTAIN OBTCMLST        Get the DSBC for the dataset
         LTR   R15,R15          Successful completion?
         BNZ   LOCERR           ...no, return the condition code
* Is this a PDS?
         LA    R1,DSCBAREA      Get the address of our DSCB data
         CLI   0(R1),X'F1'      Is this a format-1 DSCB?
         BNE   NONPDS           ...no
         NI    38(R1),X'02'     Mask DS1DSORG with the PO bit
         BZ    NONPDS           If last op = 0, it's not a PDS
* At this point, we think we have a partitioned dataset
*
* To read the directory from a PDS, we need to open the dataset as
* a sequential dataset. The directory is at the beginning, in 256
* byte blocks. Since we don't know the DSNAME of the PDS ahead of
* time, we need to dynamically allocate the dataset at runtime using
* the DYNALLOC / SVC99 capability of MVS. Building our dynamic
* allocation request block here is modeled on the example beginning
* on page 74 of GC28-0627-2, OS/VS2 MVS System Programming Library:
* Job Management.
*
* Get storage for our dynamic allocation SVC 99 request
         LA    R0,105
         GETMAIN R,LV=(R0)      Get the storage necessary
         ST    R1,DYNAREA       Save the address to DYNAREA
* ...and build the request block (RB)
         LR    R8,R1            Save the address to R8
         USING S99RBP,R8        Addressability for RBPTR DSECT
         LA    R4,S99RBPTR+4    Point 4 bytes beyond start of RBPTR
         USING S99RB,R4         Addressability for RB DSECT
         ST    R4,S99RBPTR      Point RBPTR to RB
         OI    S99RBPTR,S99RBPND Turn on the high order bit in RBPTR
         XC    S99RB(RBLEN),S99RB Zero out RB
         MVI   S99RBLN,RBLEN    Put the length of RB in its length fld
         MVI   S99VERB,S99VRBAL Set verb to allocation function
         LA    R5,S99RB+RBLEN   Point 20 bytes beyond start of RB
         USING S99TUPL,R5       Addressability for text unit ptrs
         ST    R5,S99TXTPP      Init text points address in RB
         LA    R6,S99TUPL+12    Point just past 3 text pointers
         USING S99TUNIT,R6      Addressability for 1st text unit
* Text Unit 1 - DDNAME (Set to 'DYNDCB')
         ST    R6,S99TUPTR      Point 1st TU ptr to 1st TU
         LA    R7,DALDDNAM      Get the key for DDNAME
         STH   R7,S99TUKEY      Put the key in the text unit key field
         LA    R7,1             Set count = 1
         STH   R7,S99TUNUM      Set count = 1
         LA    R7,6             Out DDNAME is 'DYNDCB'
         STH   R7,S99TULNG      ...and put it in the TU length field
         MVC   S99TUPAR(6),DDNAME Put the DDNAME into parm fld
* Text Unit 2 - DSNAME
         LA    R6,S99TUNIT+12   Point just past 1st text unit
         LA    R5,S99TUPL+4     Point to the 2nd text unit ptr in list
         ST    R6,S99TUPTR      Point 2nd TU ptr to 2nd TU
         LA    R7,DALDSNAM      Get the key for DSNAME
         STH   R7,S99TUKEY      Put the key in the text unit key field
         LA    R7,1             Set count = 1
         STH   R7,S99TUNUM      Set count = 1
         LA    R7,L'DYNDSN      Get the length of the DSNAME
         STH   R7,S99TULNG      ...and put it in the TU length field
         MVC   S99TUPAR(L'DYNDSN),DYNDSN Put the DSNAME into parm fld
* Text Unit 3 - STATUS (set to SHR)
         LA    R6,S99TUNIT+6+L'DYNDSN Point just past 2nd text unit
         LA    R5,S99TUPL+4     Point to the 3rd text unit ptr in list
         ST    R6,S99TUPTR      Point 3rd TU ptr to 3rd TU
         OI    S99TUPTR,S99TUPLN Turn on high bit to indicate last ptr
         LA    R7,DALSTATS      Get the key for status specification
         STH   R7,S99TUKEY      Put the key in the text unit key field
         LA    R7,1             Set count = 1
         STH   R7,S99TUNUM      Set count = 1
         STH   R7,S99TULNG      Set length = 1
         MVI   S99TUPAR,X'08'   Set parm to SHR
* Done building dynamic allocation request
         DROP  R4,R5,R6,R8
         LR    R1,R8            Put request block ptr in R1
         DYNALLOC               Invoke DYNALLOC to process request
         NOP   0
         OPEN  (DYNDCB,INPUT)
* TODO: Should check that the open was successful
*
* Send the initial response
         LA    R9,0             Just hard-code an "ok" response
         ST    R9,RESPONSE
         LA    R9,DSRCCW1       Load address of DSRCCW1 to R9
         ST    R9,IOBCCWAD      Point our IOB to our WRITE CCW
         L     R9,CTCDTAAD      Load address of CTCDATA DCB to R9
         ST    R9,IOBDCBAD      Point our IOB to our DCB
         XC    EXCPECB,EXCPECB  Clear EXCPECB
         EXCP  IOB              Run our WRITE command
         WAIT  ECB=EXCPECB
         CLI   EXCPECB,X'7F'    Successful completion?
         BNE   WRITERR          ...No, bail out
* Prepare the IOB for sending the member names
         LA    R9,DSRCCW2       Load address of DSRCCW2 to R9
         ST    R9,IOBCCWAD      Point our IOB to our WRITE CCW
* Now we have the DYNDCB open and ready to read the member directory.
* The format of the directory is described on page 98 of
* GC26-3875-0P OS/VS2 MVS Data Management Services Guide.
*
LOOP     GET   DYNDCB,INREC     Read the next directory block
         LH    R8,INREC         Get # of bytes used in this block
         LA    R2,2             R2 = 2
         SR    R8,R2            Subtract 2 bytes for the length
         LA    R2,INREC+2       Point to first member entry in block
LOOP01   XC    OUTREC(OUTLEN),OUTREC Clear output area
         MVC   OUTNAME,0(R2)    Copy member name to output area
         MVC   OUTC,11(R2)      Copy "C" to output area
         IC    R3,11(R2)        Load # of user data halfwords into R3
         LA    R4,X'1F'         ...
         NR    R3,R4            ...and mask out extraneous bits
         SLA   R3,1             Multiply by 2 = # of user data bytes
         EX    R3,MVCUDATA      Move R3 bytes of data into output area
* Write output line
         XC    EXCPECB,EXCPECB  Clear EXCPECB
         EXCP  IOB              Run our WRITE command
         WAIT  ECB=EXCPECB
         CLI   EXCPECB,X'7F'    Successful completion?
         BNZ   WRITERR          ...No, bail out
* Prepare for next iteration through loop
         CLC   MAXNAME,0(R2)    Last member sentinal name?
         BE    DIRDONE          Yes, goto DIRDONE
         LA    R4,12            Set R4 = 12
         AR    R2,R4            R2 = R2 + 12
         SR    R8,R4            R8 = R8 - 12 (bytes remaining)
         AR    R2,R3            R2 = R2 + # of user data bytes
         SR    R8,R3            R8 = R8 - R3 (bytes remaining)
* R2 now contains the new address in INREC for the next entry, and
* R8 contains the number of bytes in this directory block remaining.
         BZ    LOOP             Zero bytes remaining in block?
         B     LOOP01           No, read the next entry in this block
*
WRITERR  WTO   'Unsuccessful CTC WRITE during MBLIST'
*
DIRDONE  CLOSE (DYNDCB)
* Now we should deallocated our dynamic dataset allocation. We can
* re-use the memory we got earlier and build our deallocation request.
         L     R8,DYNAREA
         USING S99RBP,R8        Addressability for RBPTR DSECT
         LA    R4,S99RBPTR+4    Point 4 bytes beyond start of RBPTR
         USING S99RB,R4         Addressability for RB DSECT
         ST    R4,S99RBPTR      Point RBPTR to RB
         OI    S99RBPTR,S99RBPND Turn on the high order bit in RBPTR
         XC    S99RB(RBLEN),S99RB Zero out RB
         MVI   S99RBLN,RBLEN    Put the length of RB in its length fld
         MVI   S99VERB,S99VRBUN Set verb to unallocation function
         LA    R5,S99RB+RBLEN   Point 20 bytes beyond start of RB
         USING S99TUPL,R5       Addressability for text unit ptrs
         ST    R5,S99TXTPP      Init text points address in RB
         LA    R6,S99TUPL+4     Point just past 1 text pointer
         USING S99TUNIT,R6      Addressability for 1st text unit
* Text Unit 1 - DDNAME (Set to 'DYNDCB')
         ST    R6,S99TUPTR      Point 1st TU ptr to 1st TU
         OI    S99TUPTR,S99TUPLN Turn on high bit to indicate last ptr
         LA    R7,DALDDNAM      Get the key for DDNAME
         STH   R7,S99TUKEY      Put the key in the text unit key field
         LA    R7,1             Set count = 1
         STH   R7,S99TUNUM      Set count = 1
         LA    R7,6             Out DDNAME is 'DYNDCB'
         STH   R7,S99TULNG      ...and put it in the TU length field
         MVC   S99TUPAR(6),DDNAME Put the DDNAME into parm fld
* Done building dynamic unallocation request
         DROP  R4,R5,R6,R8
         LR    R1,R8            Put request block ptr in R1
         DYNALLOC               Invoke DYNALLOC to process request
         LA    R0,105
         L     R2,DYNAREA
         FREEMAIN R,LV=(R0),A=(R2) Free our storage
         B     QUIT
* Handle various errors and send unsuccessful result code
BADLEN   LA    R9,X'F0'         Invalid DS length = 0xF0
         B     SENDERR
LOCERR   ST    R15,RESPCOD2     Move the LOCATE/OBTAIN result RESPCOD2
         LA    R9,X'F1'         Dataset locate error = 0xF1
         B     SENDERR
NONPDS   LA    R9,X'F2'         Requested DS is not a PDS
         B     SENDERR
SENDERR  ST    R9,RESPCODE      Save the result code to RESPONSE
         LA    R9,DSRCCW1       Load address of DSRCCW1 to R9
         ST    R9,IOBCCWAD      Point our IOB to our WRITE CCW
         L     R9,CTCDTAAD      Load address of CTCDATA DCB to R9
         ST    R9,IOBDCBAD      Point our IOB to our DCB
         XC    EXCPECB,EXCPECB  Clear EXCPECB
         EXCP  IOB              Run our WRITE command
         WAIT  ECB=EXCPECB
         CLI   EXCPECB,X'7F'    Successful completion?
         BNE   WRITERR          ...No, bail out
* Return to caller
QUIT     L     R13,4(R13)       Restore address of caller's save area
         LM    R14,R12,12(R13)  Restore caller's registers
         LA    R15,0            RC=0
         BR    R14              Return to caller
*
**********************************************************************
**********************************************************************
*
***** Parameters passed into us
CTCCMDAD DS    F
CTCDTAAD DS    F
CMDINAD  DS    F
*
***** Storage and CCWs for MBRLIST command
* Initial response
RESPONSE DS    0F
RESPCODE DS    F
RESPCOD2 DC    F'0'
RESPLEN  EQU   *-RESPONSE
* MBRLIST entry record
OUTREC   DS    0F
OUTNAME  DS    CL8
OUTC     DS    CL1
OUTUDATA DS    CL62
OUTLEN   EQU   *-OUTREC
* Buffer for reading directory blocks
         DS    0F
INREC    DS    CL256
SAVEAREA DS    18F
DYNAREA  DS    A
DYNDSN   DS    CL44             DSNAME to dynamically allocate
DYNDCB   DCB   DDNAME=DYNDCB,DSORG=PS,MACRF=GM,BLKSIZE=256,RECFM=F,    +
               LRECL=256
DDNAME   DC    C'DYNDCB'
* The following instruction is used by an EX instruction to move the
* variable-length sized user data to the output area.
         DS    0F
MVCUDATA MVC   OUTUDATA(1),12(R2)
* Maximum byte value member name indicates end of directory
MAXNAME  DC    X'FFFFFFFFFFFFFFFF'
* LOCATE and OBTAIN storage
LOCCMLST CAMLST NAME,DYNDSN,,LOCWRK  Will locate DSNAME in DYNDSN
LOCWRK   DS    0D
         DS    265C
OBTCMLST CAMLST SEARCH,DYNDSN,OBTVOLSR,DSCBAREA
OBTVOLSR DS    CL6
DSCBAREA DS    0D
         DS    CL140
***********************************************************************
* Channel programs
DSRCCW1  CCW   CONTROL,OUTREC,SLI+CC,1
         CCW   WRITE,RESPONSE,SLI,RESPLEN
DSRCCW2  CCW   WRITE,OUTREC,SLI,OUTLEN
WRITE    EQU   X'01'
READ     EQU   X'02'
CONTROL  EQU   X'07'
SENSE    EQU   X'14'
SLI      EQU   X'20'
CC       EQU   X'40'
* EXCP IOB
IOB      DS    0F
IOBFLAGS DC    XL2'0000'
IOBSENSE DC    XL2'0000'
IOBECBAD DC    A(EXCPECB)
IOBCSW   DC    A(0)
IOBCSWFL DC    XL2'0000'
IOBRESDL DC    H'00'
IOBCCWAD DC    A(0)
IOBDCBAD DC    A(0)
         DC    F'0'
         DC    F'0'
SLPTIM   DC    F'25'
EXCPECB  DS    F
* Utility variables
         DS    0F
CMDLNMSK DC    X'00FFFF00'      Mask to get the param length
         PRINT NOGEN
         IEFZB4D0               DYNALLOC DSECT
         IEFZB4D2               DYNALLOC symbolic names
RBLEN    EQU   S99RBEND-S99RB
**********************************************************************
* Register symbols                                                   *
**********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   MBRLIST
